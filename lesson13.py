# разбор домашнего задания
# Напишите функцию count_letter, которая принимает 2 аргумента: строку и букву
# и возвращает сколько раз эта буква встречается в этой строке.
# Пример вызова функции:
# count_letter("В траве сидел кузнечик.", "к")
# В терминале должно выводиться:
# В тексте 2 буквы "к".
def count_letter(text, letter):
    count = 0
    for l in text:
        if l == letter:
            count += 1
    print(f'В тексте {count} буквы "{letter}".')

count_letter("В траве сидел кузнечик.", "к")
# иногда, чтобы точно не ошибиться в порядке передачи аргументов
# можно прямо указать что куда идёт:
count_letter(text='В траве сидел кузнечик.', letter='к')

# в домашнем задании переменная счётчик находится внутри функции
# но если бы нам во вчерашней функции main с рекурсией нужно было создать переменную-счётчик
# которая считает количество вызовов функции и поместили эту переменную внутри функции,
# то значение переменной обнулялась бы с каждым вызовом функции
# для того, чтобы переменная не обнулялась, поместим её вне функции
# то есть переменная-счётчик будет ГЛОБАЛЬНОЙ, а не ЛОКАЛЬНОЙ (внутри функции)
# для того, чтобы изменять значение глобальной переменной внутри функции,
# нужно это прописать
count = 0

def main():
    global count # вот таким образом
    count += 1
    print(f'------Вы запустили функцию main {count} раз------')
    print('1 - для сложения; 2 - для вычитания; 3 - для завершения программы.')
    choise = input('Введите номер действия: ')
    if choise == '1':
        add()
    elif choise == '2':
        substract()
    elif choise == '3':
        exit_programm()
    else:
        print("Неверный ввод. Попробуйте снова.")
        main()

def add():
    a = int(input('Введите первое число: '))
    b = int(input('Введите второе число: '))
    print('Результат: ', a + b)
    main()

def substract():
    a = int(input('Введите первое число: '))
    b = int(input('Введите второе число: '))
    print('Результат: ', a - b)
    main()

def exit_programm():
    print('Операция завершена...')

main()


# чтобы просто "посмотреть" на глобальную переменную внутри функции ничего дополнительного писать не нужно:
money = 2000

def check_money():
    print(f'У вас на счету ${money}') 

check_money()

# используем global когда мы хотим поменять значение переменной, например увеличить значение money:
def add(amount):
    global money
    money += amount
    print(f'Вы пополнили счёт на ${amount}. Выш баланс ${money}')

add(1000)

# функция add принимает 1 аргумент - сумму денег которую нужно прибавить к money
# но что если мы хотим, чтобы money пополнялась на 100 при вызове функции без передачи аргумента, вот так add()
def add(amount=100): # мы можем указать значение аргумента по умолчанию
    global money
    money += amount
    print(f'Вы пополнили счёт на ${amount}. Выш баланс ${money}')

add()
# теперь при вызове фукнции add без аргумента, к money будет прибавляться 100


# напишем функцию для снятия денег со счёта
# и добавим проверку чтобы мы не могли снять больше денег, чем у нас есть на счету
def get_money(amount):
    global money
    if amount > money:
        print('У вас недостаточно средств.')
    else:
        money -= amount
        print(f'Вы сняли ${amount}. Выш баланс ${money}')

get_money(500)


# напишем функцию greeting, которая принимает 1 аргумент - name
# и выводит приветственное сообщение Добро пожаловать, {введённое имя}!
# а если функция вызывается без аргумета, то выводится соообщение Добро пожаловать, Гость!
def greeting(name='Гость'):
    print(f'Добро пожаловать, {name}!')

greeting('Saadat') # Добро пожаловать, Saadat!
greeting() # Добро пожаловать, Гость!


# изучим новый тип данных
# мы с вами уже знаем типы данных:
name = 'Saadat Nazaralieva' # строки
age = 31 # целые числа
height = 1.68 # вещественные числа (дробные)
married = False # булевый тип данных

# сегодня познакомимся со СПИСКАМИ (на англ. list)
# списки создаются с помощью квадратных скобой и элементы разделяются запятой
# с помощью списков мы можем хранить список значений в одной переменной
# например список любимых предметов:
subjects = ['Биология', 'Математика', 'Химия']
print(subjects) # ['Биология', 'Математика', 'Химия']

# в данном списке 3 элемента, то есть длина списка = 3
# длину списка можно узнать и с помощью функции len (от англ. length - длина)
print(len(subjects)) # 3

# чтобы вывести каждый элемент по одному, мы можем пройтись по списку циклом for
for subject in subjects:
    print(subject)
# в терминале увидим:
# Биология
# Математика
# Химия

# чтобы вывести не в столбик, а в ряд:
for subject in subjects:
    print(subject, end=' ')
# Биология Математика Химия

# выводя элементы с помощью цикла for мы можем узнать длину каждого элемента:
for subject in subjects:
    print(len(subject))
# в терминале увидим:
# 8
# 10
# 5

# с помощью счётчика можем посчитать количество символов всех элементов списка:
symbols_count = 0
for sub in subjects:
    symbols_count += len(sub)

print(symbols_count) # 23


# выводить все элементы списка с помощью цикла for понятно
# а как вывести один элемент?
# для этого обратимся по ииндексу элемента
# индекс это "адрес" элемента списка
# первый элемент списка имеет индекс 0, второй 1, третий 2 и так далее
# чтобы из этого списка ['Биология', 'Математика', 'Химия'] вывести Математику нужно
# указать индекс этого элемента в квадратных скобках:
print(subjects[1]) # Математика
print(subjects[0]) # Биология
print(subjects[2]) # Химия

# кстати такое же обращение по индексам возможно и в строках
# чтобы вывести определённый символ нужно обратиться по индексу:
text = "Hello world!"
print(text[0]) # H
print(text[6]) # w
print(text[10]) # d
