# разбор домашнего задания
# Одна бактерия делится каждые 2 часа
# Это означает, что её количество удваивается каждые 2 часа. Изначально есть 1 бактерия.
# Напишите программу, которая:
# Запрашивает у пользователя количество часов.
# Выводит, сколько бактерий станет через это время.

# В терминале должно выводиться:
# Введите количество часов: 6
# Через 6 часов будет 8 бактерий.

# Итак, каждые 2 часа количество бактерий должно удваиваться, поэтому давайте мы цикл начнём с 2
chasy = int(input('Введите кол-во часов: '))
bacteria = 1
for i in range(2, chasy + 1, 2): # будем брать каждый второй час начиная с 2
    bacteria = bacteria * 2 # и каждый второй час удваивать количество бактерий

print(bacteria)


# с помощью цикла for можно мы можем пройтись по строке
for bukva in 'python':
    print(bukva)

# в терминале увидим:
# p
# y
# t 
# h 
# o 
# n 
# потому что по умолчанию каждый print заканчивается новой строкой
# но давайте мы сделаем так, чтобы после каждого принта у нас была не новая строчка, а пробел
# для этого используем параметр end в print()
for bukva in 'python':
    print(bukva, end=' ')

# в терминале увидим:
# p y t h o n
# теперь каждый print заканчивается пробелом на конце (отсюда и название end)

# вместо пробела можно поставить что угодно, например:
for bukva in 'python':
    print(bukva, end='---')

# p---y---t---h---o---n---


# буквы (точнее символы) в строке можно проверять на соответствие условию
for bukva in 'python': # берём каждый символ в строке 'python'
    if bukva == 't': # если символ является буквой t, то
        continue # перешагивем его, то есть переходим к следующему символу
    else: # иначе
        print(bukva, end=' ') # принтуем этот символ с пробелом на конце

# в терминале получаем:
# pyhon


# А ещё символы можно складывать
# при работе с числами ммы использовали переменную summa = 0 чтобы складывать туда числа и выводить сумму
# а при работе со строками можно складывать буквы в слова
new = '' # создаем пустую строку куда будем складывать буквы

for symbol in 'i love python': # берём по очереди каждый символ в строке
    if symbol == 'o': # если символ является буквой о
        new += symbol # конкатинируем (приклеиваем) его в переменную new

print(new) # в терминале видим: oo


# задание, которое делали на уроке:
# нужно заменить пробелы на _ (нижнее подчёркивание)
# нужно из такой строки "судебное заседание 2" получить такую "судебное_заседание_2"
new = ''
for symbol in "судебное заседание 2":
    if symbol != ' ': # если это не пробел, то
        new = new + symbol # просто добавляем этот символ в new_word
    else: # если это пробел
        new = new + '_' # то в new_word добавляем _

print(new) # судебное_заседание_2


# задача "Палиндром"
# слово считается палиндромом, если слева направо и справа налево оно читается одинаково
# например, слова ЗАКАЗ, ДОВОД, МАДАМ, РАДАР
# Напишите программу, которая принимает от пользователя слово
# и если оно является палиндромом, то выводит "Это палиндром!"
# и "это не палиндром..." в ином случае.

# для начала отзеркалим слово
word = 'python'
reversed_word = ''
for bukva in word: # каждую букву из 'python'
    reversed_word = bukva + reversed_word # добавляем в начало reversed_word, а не в конец

# итого получаем:
print(reversed_word) # nohtyp

# теперь проверим на является ли это слово палиндромом:
if word == reversed_word:
    print('Это слово палиндром!')
else:
    print('Это слово НЕ палиндром...')



# начнём знакомство со вложенными циклами
# мы умеем выводить таблицу умножения для чисел, например для числа 2:
for i in range(1, 10):
    print(2 * i)

# в терминале увидим:
# 2
# 4
# 6
# 8
# 10
# 12
# 14
# 16
# 18

# давайте выведем результат не в столбик, а в строку
for i in range(1, 10):
    print(2 * i, end=' ')

# выглядит получше
# 2 4 6 8 10 12 14 16 18


# дальше внизу выведем таблицу умножения для 3:
for i in range(1, 10):
    print(3 * i, end=' ')

# в терминале видим такую кашу:
# 2 4 6 8 10 12 14 16 18 3 6 9 12 15 18 21 24 27

# добавим пустую строку между циклами с помощью пустого print()
for i in range(1, 10):
    print(2 * i, end=' ')

print()

for i in range(1, 10):
    print(3 * i, end=' ')

# в терминале вывод стал понятнее и уже немного похоже на настоящую таблицу умножения:
# 2 4 6 8 10 12 14 16 18 
# 3 6 9 12 15 18 21 24 27

# добавим пустую строку
print()
# и еще один ряд таблицы умножения для 4:
for i in range(1, 10):
    print(4 * i, end=' ')

# у нас получилось:
# 2 4 6 8 10 12 14 16 18
# 3 6 9 12 15 18 21 24 27
# 4 8 12 16 20 24 28 32 36

# чтобы доделать таблицу умножения до 9 нам нужно написать еще много кода, но
# мы уже заметили, что цикл используется один и тот же
# меняется только множители: 2, 3, 4
# и меняются они по возрастанию
# давайте зададим эти числа с помощью цикла

for i in range(1, 10): # в i будут храниться числа от 1 до 9
    for j in range(1, 10): # и в j будут храниться числа от 1 до 9
        print(j * i, end=' ') # сначала i будет равна 1 и умножится на j (числа от 1 до 9) и между ними будет пробел
    print() # потом выведем пустую строку

# затем i будет равна 2 и умножится на j (числа от 1 до 9)
# затем i будет равна 3 и умножится на j (числа от 1 до 9)
# и так далее до 9

# получим вот такую таблицу
# 1 2 3 4 5 6 7 8 9 
# 2 4 6 8 10 12 14 16 18 
# 3 6 9 12 15 18 21 24 27
# 4 8 12 16 20 24 28 32 36
# 5 10 15 20 25 30 35 40 45
# 6 12 18 24 30 36 42 48 54
# 7 14 21 28 35 42 49 56 63
# 8 16 24 32 40 48 56 64 72
# 9 18 27 36 45 54 63 72 81


# давайте выстроим числа на равном расстоянии от друга друга
# для этого разделим их не с помощью пробела, а табуляции
# табуляцию в строке можно добавить с помощью такого знака "\t"
for i in range(1, 10):
    for j in range(1, 10):
        print(j * i, end='\t')
    print()

# и увидим красивый вывод:
# 1       2       3       4       5       6       7       8       9
# 2       4       6       8       10      12      14      16      18
# 3       6       9       12      15      18      21      24      27
# 4       8       12      16      20      24      28      32      36
# 3       6       9       12      15      18      21      24      27
# 4       8       12      16      20      24      28      32      36
# 5       10      15      20      25      30      35      40      45
# 6       12      18      24      30      36      42      48      54
# 7       14      21      28      35      42      49      56      63
# 8       16      24      32      40      48      56      64      72
# 9       18      27      36      45      54      63      72      81
