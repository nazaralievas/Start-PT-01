# разберём домашку:
# нужно было посчитать количество всех символов в строке "В траве сидел кузнечик, совсем как огуречик."
# для этого пройдёмся по строке циклом и с каждым символом будем увеличивать значение переменной kolichestvo_symbols на 1
text = "В траве сидел кузнечик, совсем как огуречик."
kolichestvo_symbols = 0
for symbol in text:
    kolichestvo_symbols += 1
print(kolichestvo_symbols)


# дополнительное задание для закрепления работы со строками:
# из исходной строки "В траве сидел кузнечик, совсем как огуречик." нужно было получить такой вывод:
# ВВ  ттррааввее  ссииддеелл  ккууззннееччиикк,,  ссооввссеемм  ккаакк  ооггууррееччиикк..
text = "В траве сидел кузнечик, совсем как огуречик."
for s in text:
    print(s * 2, end='')


# итак, на прошлом уроке мы познакомились со вложенными циклами,
# с помощью которого можно получить полную таблицу умножения для чисел от 1 до 9 включительно
for i in range(1, 10):
    for j in range(1, 10):
        print(j * i, end='\t')
    print()


# на уроке вы самосточтельно выводили таблицу сложения для чисел от 1 до 5 включительно
for i in range(6):
    for j in range(6):
        print(i + j, end=' ')
    print()


# а так же выводили такую матрицу:
# 0       -1      -2      -3      -4      -5      -6      -7      -8      -9
# 1       0       -1      -2      -3      -4      -5      -6      -7      -8
# 2       1       0       -1      -2      -3      -4      -5      -6      -7
# 3       2       1       0       -1      -2      -3      -4      -5      -6
# 4       3       2       1       0       -1      -2      -3      -4      -5
# 5       4       3       2       1       0       -1      -2      -3      -4
# 6       5       4       3       2       1       0       -1      -2      -3
# 7       6       5       4       3       2       1       0       -1      -2
# 8       7       6       5       4       3       2       1       0       -1
# 9       8       7       6       5       4       3       2       1       0
for i in range(10):
    for j in range(10):
        print(i - j, end='\t')
    print()


# теперь приступим к изучению функций
# вы знаете встроенные функции print, input, int, range, randint
# функция это фрагмент кода, который выполняет определённые операции и отдаёт результат
# давайте напишем нашу первую функцию и станет понятнее

# эта функция принимает радиус круга (в качестве параметра) и возвращает площадь круга с данным радиусом
def get_ploshad_kruga(radius): # слово def даёт понять, что мы собираемся создавать функцию, а не цикл или что-то другое
    result = 3.14 * radius ** 2 # табуляция даёт понять, что эта строка относится к функции и это ТЕЛО ФУНКЦИИ, где и происходят все расчёты
    return result # с помощью return функция возвращает значение. В данном случае результат вычислений - площадь круга

# теперь у нас есть готовая своя функция get_ploshad_kruga, которая будет нам высчитывать площадь круга
# чтобы ею воспользоваться нужно её вызвать, вот так:
# пишем название функции и в скобках передаём аргумент (радиус)
print(get_ploshad_kruga(3))
# используем print чтобы что-то вывести в терминале. 3 это радиус круга, чью площадь мы хотим узнать

# теперь для того, чтобы вычислить площадь четырёх кругов с разными радиусами нам нужно только 4 строки кода:
print(get_ploshad_kruga(45))
print(get_ploshad_kruga(80))
print(get_ploshad_kruga(9))
print(get_ploshad_kruga(12))


# функция может принимать 2 параметра
# например эта функция, которая вычисляет площадь прямоугольника
def get_ploshad_pryamoug(a, b):
    result = a * b
    return result

# вызывается эта функция точно так же, только принимает уже 2 аргумента (длину и ширину прямоугольника)
print(get_ploshad_pryamoug(5, 10))


# задание№1
# напишите функцию, которая принимает длину и ширину прямоугольника и возвращает её периметр
def get_perimetr_pryamoug(a, b):
    result = 2 * (a + b)
    return result


# задание№2
# напишите функцию, которая принимает 2 числа и возвращает бОльшее. Если числа равны, то возвращает одно из чисел
def get_max(a, b):
    if a > b: # если а больше b, функция возвращает а
        return a
    else: # если b > a или b == а, то возвращает b
        return b